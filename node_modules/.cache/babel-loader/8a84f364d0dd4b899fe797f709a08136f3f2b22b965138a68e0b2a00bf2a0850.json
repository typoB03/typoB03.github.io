{"ast":null,"code":"var _jsxFileName = \"/Users/playtime/Desktop/Project/ye-sheng/src/ThreeBackground/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { createNoise2D } from 'simplex-noise';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeBackground = () => {\n  _s();\n  const noise = new SimplexNoise();\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.z = 96;\n    const canvas = document.getElementById(\"three-bg-canvas\");\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    const container = document.getElementById(\"three-bg-container\");\n    container.appendChild(renderer.domElement);\n    var loader = new GLTFLoader();\n    loader.load(\"/glb/sui.glb\", function (gltf) {\n      const albumModal = gltf.scene;\n      albumModal.scale.set(0.1, 0.1, 0.1);\n      albumModal.position.set(-20, -24, -18);\n      scene.add(albumModal);\n    });\n\n    // const loader = new THREE.TextureLoader();\n    // const texture = loader.load(img);\n\n    // const geometry = new THREE.PlaneGeometry(20, 20); // ensure correct aspect ratio\n    // const material = new THREE.MeshBasicMaterial({ map: texture });\n\n    // const albumPlane = new THREE.Mesh(geometry, material);\n    // scene.add(albumPlane);\n\n    const icosahedronGeometry = new THREE.IcosahedronGeometry(20, 5);\n    const lambertMaterial = new THREE.MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: true\n    });\n    const musicCube = new THREE.Mesh(icosahedronGeometry, lambertMaterial);\n    musicCube.position.set(0, 0, 0);\n    scene.add(musicCube);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);\n    ambientLight.castShadow = true;\n    scene.add(ambientLight);\n    const spotLight = new THREE.SpotLight(0xffffff, 1);\n    spotLight.castShadow = true;\n    scene.add(spotLight);\n    const controller = new OrbitControls(camera, renderer.domElement);\n    const animate = () => {\n      controller.update();\n      renderer.render(scene, camera);\n      window.requestAnimationFrame(animate);\n    };\n    animate();\n  }, []);\n  const makeRoughBall = (mesh, bassFr, treFr) => {\n    mesh.geometry.vertices.forEach(function (vertex, i) {\n      var offset = mesh.geometry.parameters.radius;\n      var amp = 7;\n      var time = window.performance.now();\n      vertex.normalize();\n      var rf = 0.00001;\n      var distance = offset + bassFr + noise.noise3D(vertex.x + time * rf * 7, vertex.y + time * rf * 8, vertex.z + time * rf * 9) * amp * treFr;\n      vertex.multiplyScalar(distance);\n    });\n    mesh.geometry.verticesNeedUpdate = true;\n    mesh.geometry.normalsNeedUpdate = true;\n    mesh.geometry.computeVertexNormals();\n    mesh.geometry.computeFaceNormals();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"three-bg-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"three-bg-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: \"/music/freestyle.wav\",\n      controls: true,\n      style: {\n        position: \"absolute\",\n        bottom: \"0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeBackground, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ThreeBackground;\nexport default ThreeBackground;\nvar _c;\n$RefreshReg$(_c, \"ThreeBackground\");","map":{"version":3,"names":["React","useEffect","THREE","OrbitControls","GLTFLoader","createNoise2D","ThreeBackground","noise","SimplexNoise","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","canvas","document","getElementById","renderer","WebGLRenderer","antialias","setSize","container","appendChild","domElement","loader","load","gltf","albumModal","scale","set","add","icosahedronGeometry","IcosahedronGeometry","lambertMaterial","MeshLambertMaterial","color","wireframe","musicCube","Mesh","ambientLight","AmbientLight","castShadow","spotLight","SpotLight","controller","animate","update","render","requestAnimationFrame","makeRoughBall","mesh","bassFr","treFr","geometry","vertices","forEach","vertex","i","offset","parameters","radius","amp","time","performance","now","normalize","rf","distance","noise3D","x","y","multiplyScalar","verticesNeedUpdate","normalsNeedUpdate","computeVertexNormals","computeFaceNormals","bottom"],"sources":["/Users/playtime/Desktop/Project/ye-sheng/src/ThreeBackground/index.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { createNoise2D } from 'simplex-noise';\n\nconst ThreeBackground = () => {\n    const noise = new SimplexNoise();\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(\n            50,\n            window.innerWidth / window.innerHeight,\n            1,\n            1000\n        );\n        camera.position.z = 96;\n\n        const canvas = document.getElementById(\"three-bg-canvas\");\n\n        const renderer = new THREE.WebGLRenderer({\n            canvas,\n            antialias: true,\n        });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        const container = document.getElementById(\"three-bg-container\");\n\n        container.appendChild(renderer.domElement);\n\n        var loader = new GLTFLoader();\n\n        loader.load(\"/glb/sui.glb\", function (gltf) {\n            const albumModal = gltf.scene;\n            albumModal.scale.set(0.1, 0.1, 0.1);\n            albumModal.position.set(-20, -24, -18);\n            scene.add(albumModal);\n        });\n\n        // const loader = new THREE.TextureLoader();\n        // const texture = loader.load(img);\n\n        // const geometry = new THREE.PlaneGeometry(20, 20); // ensure correct aspect ratio\n        // const material = new THREE.MeshBasicMaterial({ map: texture });\n\n        // const albumPlane = new THREE.Mesh(geometry, material);\n        // scene.add(albumPlane);\n\n        const icosahedronGeometry = new THREE.IcosahedronGeometry(20, 5);\n        const lambertMaterial = new THREE.MeshLambertMaterial({\n            color: 0xffffff,\n            wireframe: true,\n        });\n\n        const musicCube = new THREE.Mesh(icosahedronGeometry, lambertMaterial);\n        musicCube.position.set(0, 0, 0);\n        scene.add(musicCube);\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);\n        ambientLight.castShadow = true;\n        scene.add(ambientLight);\n\n        const spotLight = new THREE.SpotLight(0xffffff, 1);\n        spotLight.castShadow = true;\n        scene.add(spotLight);\n\n        const controller = new OrbitControls(camera, renderer.domElement);\n\n        const animate = () => {\n            controller.update();\n            renderer.render(scene, camera);\n            window.requestAnimationFrame(animate);\n        };\n        animate();\n    }, []);\n\n    const makeRoughBall = (mesh, bassFr, treFr) => {\n        mesh.geometry.vertices.forEach(function (vertex, i) {\n            var offset = mesh.geometry.parameters.radius;\n            var amp = 7;\n            var time = window.performance.now();\n            vertex.normalize();\n            var rf = 0.00001;\n            var distance = (offset + bassFr ) + noise.noise3D(vertex.x + time *rf*7, vertex.y +  time*rf*8, vertex.z + time*rf*9) * amp * treFr;\n            vertex.multiplyScalar(distance);\n        });\n        mesh.geometry.verticesNeedUpdate = true;\n        mesh.geometry.normalsNeedUpdate = true;\n        mesh.geometry.computeVertexNormals();\n        mesh.geometry.computeFaceNormals();\n    }\n\n    return (\n        <div id=\"three-bg-container\">\n            <canvas id=\"three-bg-canvas\" />\n            <audio\n                src=\"/music/freestyle.wav\"\n                controls\n                style={{ position: \"absolute\", bottom: \"0\" }}\n            />\n        </div>\n    );\n};\n\nexport default ThreeBackground;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}