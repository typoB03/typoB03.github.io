{"ast":null,"code":"var _jsxFileName = \"/Users/playtime/Desktop/Project/ye-sheng/src/ThreeBackground/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { createNoise3D } from \"simplex-noise\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeBackground = () => {\n  _s();\n  const noise = createNoise3D();\n  let audioSource;\n  let analyser;\n  let dataArray;\n  useEffect(() => {\n    //getting audio context\n    if (!audioSource) {\n      const audio = document.getElementById(\"music-audio\");\n      const context = new AudioContext();\n      audioSource = context.createMediaElementSource(audio);\n      analyser = context.createAnalyser();\n      audioSource.connect(analyser);\n      analyser.connect(context.destination);\n      analyser.fftSize = 512;\n      const bufferLength = analyser.frequencyBinCount;\n      dataArray = new Uint8Array(bufferLength);\n    }\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.z = 96;\n    const canvas = document.getElementById(\"three-bg-canvas\");\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    const container = document.getElementById(\"three-bg-container\");\n    container.appendChild(renderer.domElement);\n    var loader = new GLTFLoader();\n    loader.load(\"/glb/sui.glb\", function (gltf) {\n      const albumModal = gltf.scene;\n      albumModal.scale.set(0.1, 0.1, 0.1);\n      albumModal.position.set(-20, -24, -18);\n      scene.add(albumModal);\n    });\n\n    // const loader = new THREE.TextureLoader();\n    // const texture = loader.load(img);\n\n    // const geometry = new THREE.PlaneGeometry(20, 20); // ensure correct aspect ratio\n    // const material = new THREE.MeshBasicMaterial({ map: texture });\n\n    // const albumPlane = new THREE.Mesh(geometry, material);\n    // scene.add(albumPlane);\n\n    const icosahedronGeometry = new THREE.IcosahedronGeometry(20, 5);\n    const lambertMaterial = new THREE.MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: true\n    });\n    const musicCube = new THREE.Mesh(icosahedronGeometry, lambertMaterial);\n    musicCube.position.set(0, 0, 0);\n    scene.add(musicCube);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);\n    ambientLight.castShadow = true;\n    scene.add(ambientLight);\n    const spotLight = new THREE.SpotLight(0xffffff, 1);\n    spotLight.castShadow = true;\n    scene.add(spotLight);\n    const controller = new OrbitControls(camera, renderer.domElement);\n    const animate = () => {\n      analyser.getByteFrequencyData(dataArray);\n      var lowerHalfArray = dataArray.slice(0, dataArray.length / 2 - 1);\n      var upperHalfArray = dataArray.slice(dataArray.length / 2 - 1, dataArray.length - 1);\n      var lowerMax = max(lowerHalfArray);\n      var upperAvg = avg(upperHalfArray);\n      var lowerMaxFr = lowerMax / lowerHalfArray.length;\n      var upperAvgFr = upperAvg / upperHalfArray.length;\n      makeRoughBall(ball, modulate(Math.pow(lowerMaxFr, 0.8), 0, 1, 0, 8), modulate(upperAvgFr, 0, 1, 0, 4));\n      controller.update();\n      renderer.render(scene, camera);\n      window.requestAnimationFrame(animate);\n    };\n    animate();\n  }, []);\n  const makeRoughBall = (mesh, bassFr, treFr) => {\n    mesh.geometry.vertices.forEach(function (vertex, i) {\n      var offset = mesh.geometry.parameters.radius;\n      var amp = 7;\n      var time = window.performance.now();\n      vertex.normalize();\n      var rf = 0.00001;\n      var distance = offset + bassFr + noise(vertex.x + time * rf * 7, vertex.y + time * rf * 8, vertex.z + time * rf * 9) * amp * treFr;\n      vertex.multiplyScalar(distance);\n    });\n    mesh.geometry.verticesNeedUpdate = true;\n    mesh.geometry.normalsNeedUpdate = true;\n    mesh.geometry.computeVertexNormals();\n    mesh.geometry.computeFaceNormals();\n  };\n  const fractionate = (val, minVal, maxVal) => {\n    return (val - minVal) / (maxVal - minVal);\n  };\n  const modulate = (val, minVal, maxVal, outMin, outMax) => {\n    var fr = fractionate(val, minVal, maxVal);\n    var delta = outMax - outMin;\n    return outMin + fr * delta;\n  };\n  const avg = arr => {\n    var total = arr.reduce(function (sum, b) {\n      return sum + b;\n    });\n    return total / arr.length;\n  };\n  const max = arr => {\n    return arr.reduce(function (a, b) {\n      return Math.max(a, b);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"three-bg-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"three-bg-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"music-audio\",\n      src: \"/music/freestyle.wav\",\n      controls: true,\n      style: {\n        position: \"absolute\",\n        bottom: \"0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeBackground, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ThreeBackground;\nexport default ThreeBackground;\nvar _c;\n$RefreshReg$(_c, \"ThreeBackground\");","map":{"version":3,"names":["React","useEffect","THREE","OrbitControls","GLTFLoader","createNoise3D","ThreeBackground","noise","audioSource","analyser","dataArray","audio","document","getElementById","context","AudioContext","createMediaElementSource","createAnalyser","connect","destination","fftSize","bufferLength","frequencyBinCount","Uint8Array","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","canvas","renderer","WebGLRenderer","antialias","setSize","container","appendChild","domElement","loader","load","gltf","albumModal","scale","set","add","icosahedronGeometry","IcosahedronGeometry","lambertMaterial","MeshLambertMaterial","color","wireframe","musicCube","Mesh","ambientLight","AmbientLight","castShadow","spotLight","SpotLight","controller","animate","getByteFrequencyData","lowerHalfArray","slice","length","upperHalfArray","lowerMax","max","upperAvg","avg","lowerMaxFr","upperAvgFr","makeRoughBall","ball","modulate","Math","pow","update","render","requestAnimationFrame","mesh","bassFr","treFr","geometry","vertices","forEach","vertex","i","offset","parameters","radius","amp","time","performance","now","normalize","rf","distance","x","y","multiplyScalar","verticesNeedUpdate","normalsNeedUpdate","computeVertexNormals","computeFaceNormals","fractionate","val","minVal","maxVal","outMin","outMax","fr","delta","arr","total","reduce","sum","b","a","bottom"],"sources":["/Users/playtime/Desktop/Project/ye-sheng/src/ThreeBackground/index.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { createNoise3D } from \"simplex-noise\";\n\nconst ThreeBackground = () => {\n    const noise = createNoise3D();\n    let audioSource;\n    let analyser;\n    let dataArray;\n\n    useEffect(() => {\n        //getting audio context\n        if (!audioSource) {\n            const audio = document.getElementById(\"music-audio\");\n            const context = new AudioContext();\n            audioSource = context.createMediaElementSource(audio);\n            analyser = context.createAnalyser();\n            audioSource.connect(analyser);\n            analyser.connect(context.destination);\n            analyser.fftSize = 512;\n            const bufferLength = analyser.frequencyBinCount;\n            dataArray = new Uint8Array(bufferLength);\n        }\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(\n            50,\n            window.innerWidth / window.innerHeight,\n            1,\n            1000\n        );\n        camera.position.z = 96;\n\n        const canvas = document.getElementById(\"three-bg-canvas\");\n\n        const renderer = new THREE.WebGLRenderer({\n            canvas,\n            antialias: true,\n        });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        const container = document.getElementById(\"three-bg-container\");\n\n        container.appendChild(renderer.domElement);\n\n        var loader = new GLTFLoader();\n\n        loader.load(\"/glb/sui.glb\", function (gltf) {\n            const albumModal = gltf.scene;\n            albumModal.scale.set(0.1, 0.1, 0.1);\n            albumModal.position.set(-20, -24, -18);\n            scene.add(albumModal);\n        });\n\n        // const loader = new THREE.TextureLoader();\n        // const texture = loader.load(img);\n\n        // const geometry = new THREE.PlaneGeometry(20, 20); // ensure correct aspect ratio\n        // const material = new THREE.MeshBasicMaterial({ map: texture });\n\n        // const albumPlane = new THREE.Mesh(geometry, material);\n        // scene.add(albumPlane);\n\n        const icosahedronGeometry = new THREE.IcosahedronGeometry(20, 5);\n        const lambertMaterial = new THREE.MeshLambertMaterial({\n            color: 0xffffff,\n            wireframe: true,\n        });\n\n        const musicCube = new THREE.Mesh(icosahedronGeometry, lambertMaterial);\n        musicCube.position.set(0, 0, 0);\n        scene.add(musicCube);\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);\n        ambientLight.castShadow = true;\n        scene.add(ambientLight);\n\n        const spotLight = new THREE.SpotLight(0xffffff, 1);\n        spotLight.castShadow = true;\n        scene.add(spotLight);\n\n        const controller = new OrbitControls(camera, renderer.domElement);\n\n        const animate = () => {\n            analyser.getByteFrequencyData(dataArray);\n\n            var lowerHalfArray = dataArray.slice(0, dataArray.length / 2 - 1);\n            var upperHalfArray = dataArray.slice(\n                dataArray.length / 2 - 1,\n                dataArray.length - 1\n            );\n\n            var lowerMax = max(lowerHalfArray);\n            var upperAvg = avg(upperHalfArray);\n\n            var lowerMaxFr = lowerMax / lowerHalfArray.length;\n            var upperAvgFr = upperAvg / upperHalfArray.length;\n\n            makeRoughBall(ball, modulate(Math.pow(lowerMaxFr, 0.8), 0, 1, 0, 8), modulate(upperAvgFr, 0, 1, 0, 4));\n\n            controller.update();\n            renderer.render(scene, camera);\n            window.requestAnimationFrame(animate);\n        };\n        animate();\n    }, []);\n\n    const makeRoughBall = (mesh, bassFr, treFr) => {\n        mesh.geometry.vertices.forEach(function (vertex, i) {\n            var offset = mesh.geometry.parameters.radius;\n            var amp = 7;\n            var time = window.performance.now();\n            vertex.normalize();\n            var rf = 0.00001;\n            var distance =\n                offset +\n                bassFr +\n                noise(\n                    vertex.x + time * rf * 7,\n                    vertex.y + time * rf * 8,\n                    vertex.z + time * rf * 9\n                ) *\n                    amp *\n                    treFr;\n            vertex.multiplyScalar(distance);\n        });\n        mesh.geometry.verticesNeedUpdate = true;\n        mesh.geometry.normalsNeedUpdate = true;\n        mesh.geometry.computeVertexNormals();\n        mesh.geometry.computeFaceNormals();\n    };\n\n    const fractionate = (val, minVal, maxVal) => {\n        return (val - minVal)/(maxVal - minVal);\n    }\n\n    const modulate = (val, minVal, maxVal, outMin, outMax) => {\n        var fr = fractionate(val, minVal, maxVal);\n        var delta = outMax - outMin;\n        return outMin + (fr * delta);\n    }\n    \n    const avg = (arr) => {\n        var total = arr.reduce(function(sum, b) { return sum + b; });\n        return (total / arr.length);\n    }\n    \n    const max = (arr) => {\n        return arr.reduce(function(a, b){ return Math.max(a, b); })\n    }\n\n    return (\n        <div id=\"three-bg-container\">\n            <canvas id=\"three-bg-canvas\" />\n            <audio\n                id=\"music-audio\"\n                src=\"/music/freestyle.wav\"\n                controls\n                style={{ position: \"absolute\", bottom: \"0\" }}\n            />\n        </div>\n    );\n};\n\nexport default ThreeBackground;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}