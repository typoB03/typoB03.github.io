{"ast":null,"code":"var _jsxFileName = \"/Users/playtime/Desktop/Project/ye-sheng/src/ThreeBackground/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { createNoise3D } from \"simplex-noise\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeBackground = () => {\n  _s();\n  const noise = createNoise3D();\n  let audioSource;\n  let analyser;\n  let dataArray;\n  let musicCube;\n  const img = '/albums/shenghuo.jpg';\n  useEffect(() => {\n    //getting audio context\n    if (!audioSource) {\n      const audio = document.getElementById(\"music-audio\");\n      audio.src = \"/music/freestyle.wav\";\n      audio.load();\n      audio.play();\n      const context = new AudioContext();\n      audioSource = context.createMediaElementSource(audio);\n      analyser = context.createAnalyser();\n      audioSource.connect(analyser);\n      analyser.connect(context.destination);\n      analyser.fftSize = 512;\n      audioSource.connect(context.destination);\n      const bufferLength = analyser.frequencyBinCount;\n      dataArray = new Uint8Array(bufferLength);\n    }\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.z = 96;\n    const canvas = document.getElementById(\"three-bg-canvas\");\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    const container = document.getElementById(\"three-bg-container\");\n    container.appendChild(renderer.domElement);\n\n    //for loading GLB\n    // var loader = new GLTFLoader();\n\n    // loader.load(\"/glb/sui.glb\", function (gltf) {\n    //     const albumModal = gltf.scene;\n    //     albumModal.scale.set(0.1, 0.1, 0.1);\n    //     albumModal.position.set(-20, -24, -18);\n    //     scene.add(albumModal);\n    // });\n\n    const loader = new THREE.TextureLoader();\n    const texture = loader.load(img);\n    const albumGeometry = new THREE.BoxGeometry(20, 20, 1); // ensure correct aspect ratio\n    const albumMaterial = [new THREE.MeshBasicMaterial({\n      color: 'gray' //left\n    }), new THREE.MeshBasicMaterial({\n      color: 'gray' //right\n    }), new THREE.MeshBasicMaterial({\n      color: 'gray' // top\n    }), new THREE.MeshBasicMaterial({\n      color: 'gray' // bottom\n    }), new THREE.MeshBasicMaterial({\n      map: texture // front\n    }), new THREE.MeshBasicMaterial({\n      color: 'gray' //back\n    })];\n\n    const albumPlane = new THREE.Mesh(albumGeometry, albumMaterial);\n    scene.add(albumPlane);\n    const musicGeometry = new THREE.TorusKnotGeometry(20, 1.98, 200, 13, 2, 3);\n    const musicMaterial = new THREE.MeshLambertMaterial({\n      color: 0xffffff,\n      wireframe: true\n    });\n    musicCube = new THREE.Mesh(musicGeometry, musicMaterial);\n    musicCube.position.set(0, 0, 0);\n    scene.add(musicCube);\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);\n    ambientLight.castShadow = true;\n    scene.add(ambientLight);\n    const spotLight = new THREE.SpotLight(0xffffff, 1);\n    spotLight.castShadow = true;\n    scene.add(spotLight);\n    const controller = new OrbitControls(camera, renderer.domElement);\n    const animate = () => {\n      if (musicCube) {\n        analyser.getByteFrequencyData(dataArray);\n        var lowerHalfArray = dataArray.slice(0, dataArray.length / 2 - 1);\n        var upperHalfArray = dataArray.slice(dataArray.length / 2 - 1, dataArray.length - 1);\n        var lowerMax = max(lowerHalfArray);\n        var upperAvg = avg(upperHalfArray);\n        var lowerMaxFr = lowerMax / lowerHalfArray.length;\n        var upperAvgFr = upperAvg / upperHalfArray.length;\n        const modA = modulate(Math.pow(lowerMaxFr, 0.8), 0, 1, 0, 5);\n        const modB = modulate(upperAvgFr, 0, 1, 0, 4);\n        makeRoughBall(musicCube, 4, modB);\n      }\n      controller.update();\n      renderer.render(scene, camera);\n      window.requestAnimationFrame(animate);\n    };\n    animate();\n  }, []);\n  const makeRoughBall = (mesh, bassFr, treFr) => {\n    let position = mesh.geometry.attributes.position;\n    const vertex = new THREE.Vector3();\n    for (let i = 0, l = position.count; i < l; i++) {\n      vertex.fromBufferAttribute(position, i);\n      vertex.applyMatrix4(mesh.matrixWorld);\n      var offset = mesh.geometry.parameters.radius;\n      var amp = 2;\n      var time = window.performance.now();\n      vertex.normalize();\n      var rf = 0.00001;\n      var distance = offset + bassFr + noise(vertex.x + time * rf * 7, vertex.y + time * rf * 8, vertex.z + time * rf * 9) * amp * treFr;\n      vertex.multiplyScalar(distance);\n      position.setXYZ(i, vertex.x, vertex.y, vertex.z);\n      position.needsUpdate = true;\n    }\n    mesh.geometry.verticesNeedUpdate = true;\n    mesh.geometry.normalsNeedUpdate = true;\n    mesh.updateMatrixWorld();\n  };\n  const makeRing = (mesh, bassFr, treFr) => {\n    let position = mesh.geometry.attributes.position;\n    const vertex = new THREE.Vector3();\n    for (let i = 0, l = position.count; i < l; i++) {\n      vertex.fromBufferAttribute(position, i);\n      vertex.applyMatrix4(mesh.matrixWorld);\n      var offset = mesh.geometry.parameters.radius;\n      var amp = 2;\n      var time = window.performance.now();\n      vertex.normalize();\n      var rf = 0.00001;\n      var distance = offset + bassFr + noise(vertex.x + time * rf * 7, vertex.y + time * rf * 8, vertex.z + time * rf * 9) * amp * treFr;\n      vertex.multiplyScalar(distance);\n      position.setXYZ(i, vertex.x, vertex.y, vertex.z);\n      position.needsUpdate = true;\n    }\n    mesh.geometry.verticesNeedUpdate = true;\n    mesh.geometry.normalsNeedUpdate = true;\n    mesh.updateMatrixWorld();\n  };\n  const fractionate = (val, minVal, maxVal) => {\n    return (val - minVal) / (maxVal - minVal);\n  };\n  const modulate = (val, minVal, maxVal, outMin, outMax) => {\n    var fr = fractionate(val, minVal, maxVal);\n    var delta = outMax - outMin;\n    return outMin + fr * delta;\n  };\n  const avg = arr => {\n    var total = arr.reduce(function (sum, b) {\n      return sum + b;\n    });\n    return total / arr.length;\n  };\n  const max = arr => {\n    return arr.reduce(function (a, b) {\n      return Math.max(a, b);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"three-bg-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"three-bg-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"music-audio\",\n      controls: true,\n      style: {\n        position: \"absolute\",\n        bottom: \"5px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeBackground, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ThreeBackground;\nexport default ThreeBackground;\nvar _c;\n$RefreshReg$(_c, \"ThreeBackground\");","map":{"version":3,"names":["React","useEffect","THREE","OrbitControls","GLTFLoader","createNoise3D","ThreeBackground","noise","audioSource","analyser","dataArray","musicCube","img","audio","document","getElementById","src","load","play","context","AudioContext","createMediaElementSource","createAnalyser","connect","destination","fftSize","bufferLength","frequencyBinCount","Uint8Array","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","canvas","renderer","WebGLRenderer","antialias","setSize","container","appendChild","domElement","loader","TextureLoader","texture","albumGeometry","BoxGeometry","albumMaterial","MeshBasicMaterial","color","map","albumPlane","Mesh","add","musicGeometry","TorusKnotGeometry","musicMaterial","MeshLambertMaterial","wireframe","set","ambientLight","AmbientLight","castShadow","spotLight","SpotLight","controller","animate","getByteFrequencyData","lowerHalfArray","slice","length","upperHalfArray","lowerMax","max","upperAvg","avg","lowerMaxFr","upperAvgFr","modA","modulate","Math","pow","modB","makeRoughBall","update","render","requestAnimationFrame","mesh","bassFr","treFr","geometry","attributes","vertex","Vector3","i","l","count","fromBufferAttribute","applyMatrix4","matrixWorld","offset","parameters","radius","amp","time","performance","now","normalize","rf","distance","x","y","multiplyScalar","setXYZ","needsUpdate","verticesNeedUpdate","normalsNeedUpdate","updateMatrixWorld","makeRing","fractionate","val","minVal","maxVal","outMin","outMax","fr","delta","arr","total","reduce","sum","b","a","bottom","left","transform"],"sources":["/Users/playtime/Desktop/Project/ye-sheng/src/ThreeBackground/index.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/addons/loaders/GLTFLoader.js\";\nimport { createNoise3D } from \"simplex-noise\";\n\nconst ThreeBackground = () => {\n    const noise = createNoise3D();\n\n    let audioSource;\n    let analyser;\n    let dataArray;\n    let musicCube;\n\n    const img = '/albums/shenghuo.jpg';\n\n    useEffect(() => {\n        //getting audio context\n        if (!audioSource) {\n            const audio = document.getElementById(\"music-audio\");\n            audio.src = \"/music/freestyle.wav\";\n            audio.load();\n            audio.play();\n            const context = new AudioContext();\n            audioSource = context.createMediaElementSource(audio);\n            analyser = context.createAnalyser();\n            audioSource.connect(analyser);\n            analyser.connect(context.destination);\n            analyser.fftSize = 512;\n            audioSource.connect(context.destination);\n            const bufferLength = analyser.frequencyBinCount;\n            dataArray = new Uint8Array(bufferLength);\n        }\n\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(\n            50,\n            window.innerWidth / window.innerHeight,\n            1,\n            1000\n        );\n        camera.position.z = 96;\n\n        const canvas = document.getElementById(\"three-bg-canvas\");\n\n        const renderer = new THREE.WebGLRenderer({\n            canvas,\n            antialias: true,\n        });\n\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        const container = document.getElementById(\"three-bg-container\");\n\n        container.appendChild(renderer.domElement);\n\n        //for loading GLB\n        // var loader = new GLTFLoader();\n\n        // loader.load(\"/glb/sui.glb\", function (gltf) {\n        //     const albumModal = gltf.scene;\n        //     albumModal.scale.set(0.1, 0.1, 0.1);\n        //     albumModal.position.set(-20, -24, -18);\n        //     scene.add(albumModal);\n        // });\n\n        const loader = new THREE.TextureLoader();\n        const texture = loader.load(img);\n\n        const albumGeometry = new THREE.BoxGeometry(20,20,1); // ensure correct aspect ratio\n        const albumMaterial = [\n            new THREE.MeshBasicMaterial({\n                color: 'gray' //left\n            }),\n            new THREE.MeshBasicMaterial({\n                color: 'gray' //right\n            }),\n            new THREE.MeshBasicMaterial({\n                color: 'gray' // top\n            }),\n            new THREE.MeshBasicMaterial({\n                color: 'gray' // bottom\n            }),\n            new THREE.MeshBasicMaterial({\n                map: texture // front\n            }),\n            new THREE.MeshBasicMaterial({\n                color: 'gray' //back\n            })\n        ];\n\n        const albumPlane = new THREE.Mesh(albumGeometry, albumMaterial);\n        scene.add(albumPlane);\n\n        const musicGeometry = new THREE.TorusKnotGeometry( 20, 1.98, 200, 13, 2, 3 );\n\n        const musicMaterial = new THREE.MeshLambertMaterial({\n            color: 0xffffff,\n            wireframe: true,\n        });\n\n        musicCube = new THREE.Mesh(musicGeometry, musicMaterial);\n        musicCube.position.set(0, 0, 0);\n        scene.add(musicCube);\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);\n        ambientLight.castShadow = true;\n        scene.add(ambientLight);\n\n        const spotLight = new THREE.SpotLight(0xffffff, 1);\n        spotLight.castShadow = true;\n        scene.add(spotLight);\n\n        const controller = new OrbitControls(camera, renderer.domElement);\n\n        const animate = () => {\n            if (musicCube) {\n                analyser.getByteFrequencyData(dataArray);\n\n                var lowerHalfArray = dataArray.slice(\n                    0,\n                    dataArray.length / 2 - 1\n                );\n                var upperHalfArray = dataArray.slice(\n                    dataArray.length / 2 - 1,\n                    dataArray.length - 1\n                );\n\n                var lowerMax = max(lowerHalfArray);\n                var upperAvg = avg(upperHalfArray);\n\n                var lowerMaxFr = lowerMax / lowerHalfArray.length;\n                var upperAvgFr = upperAvg / upperHalfArray.length;\n\n                const modA = modulate(Math.pow(lowerMaxFr, 0.8), 0, 1, 0, 5);\n                const modB = modulate(upperAvgFr, 0, 1, 0, 4);\n\n                makeRoughBall(\n                    musicCube,\n                    4,\n                    modB\n                );\n            }\n\n            controller.update();\n            renderer.render(scene, camera);\n            window.requestAnimationFrame(animate);\n        };\n        animate();\n    }, []);\n\n    const makeRoughBall = (mesh, bassFr, treFr) => {\n        let position = mesh.geometry.attributes.position;\n        const vertex = new THREE.Vector3();\n\n        for (let i = 0, l = position.count; i < l; i++) {\n            vertex.fromBufferAttribute(position, i);\n            vertex.applyMatrix4(mesh.matrixWorld);\n            var offset = mesh.geometry.parameters.radius;\n            var amp = 2;\n            var time = window.performance.now();\n            vertex.normalize();\n            var rf = 0.00001;\n            var distance =\n                offset +\n                bassFr +\n                noise(\n                    vertex.x + time * rf * 7,\n                    vertex.y + time * rf * 8,\n                    vertex.z + time * rf * 9\n                ) *\n                    amp *\n                    treFr;\n            vertex.multiplyScalar(distance);\n            position.setXYZ(i, vertex.x, vertex.y, vertex.z);\n            position.needsUpdate = true;\n        }\n\n        mesh.geometry.verticesNeedUpdate = true;\n        mesh.geometry.normalsNeedUpdate = true;\n        mesh.updateMatrixWorld();\n    };\n\n    const makeRing = (mesh, bassFr, treFr) => {\n        let position = mesh.geometry.attributes.position;\n        const vertex = new THREE.Vector3();\n\n        for (let i = 0, l = position.count; i < l; i++) {\n            vertex.fromBufferAttribute(position, i);\n            vertex.applyMatrix4(mesh.matrixWorld);\n            var offset = mesh.geometry.parameters.radius;\n            var amp = 2;\n            var time = window.performance.now();\n            vertex.normalize();\n            var rf = 0.00001;\n            var distance =\n                offset +\n                bassFr +\n                noise(\n                    vertex.x + time * rf * 7,\n                    vertex.y + time * rf * 8,\n                    vertex.z + time * rf * 9\n                ) *\n                    amp *\n                    treFr;\n            vertex.multiplyScalar(distance);\n            position.setXYZ(i, vertex.x, vertex.y, vertex.z);\n            position.needsUpdate = true;\n        }\n\n        mesh.geometry.verticesNeedUpdate = true;\n        mesh.geometry.normalsNeedUpdate = true;\n        mesh.updateMatrixWorld();\n    };\n\n    const fractionate = (val, minVal, maxVal) => {\n        return (val - minVal) / (maxVal - minVal);\n    };\n\n    const modulate = (val, minVal, maxVal, outMin, outMax) => {\n        var fr = fractionate(val, minVal, maxVal);\n        var delta = outMax - outMin;\n        return outMin + fr * delta;\n    };\n\n    const avg = (arr) => {\n        var total = arr.reduce(function (sum, b) {\n            return sum + b;\n        });\n        return total / arr.length;\n    };\n\n    const max = (arr) => {\n        return arr.reduce(function (a, b) {\n            return Math.max(a, b);\n        });\n    };\n\n    return (\n        <div id=\"three-bg-container\">\n            <canvas id=\"three-bg-canvas\" />\n            <audio\n                id=\"music-audio\"\n                controls\n                style={{ position: \"absolute\", bottom: \"5px\", left: \"50%\", transform:\"translateX(-50%)\" }}\n            />\n        </div>\n    );\n};\n\nexport default ThreeBackground;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}